# *****************************************************************
# *          ESPHome Custom Component Modbus sniffer for          *
# *              Delta Solvia Inverter 3.0 EU G4 TR               *
# *             installed with Solivia Gateway M1 D2.             *
# *****************************************************************
#
# Remember to copy the Custom Component solivia.h file to the ESPHome folder in
# Home Assistant !!
#
# This config doesn't send any commands to the inverter !!
# Instead it relies on the gateways constant request for data (appx. 1 package pr. second).
#
# If you don't have a gateway, the package request can instead easily be send from
# ESPHome using uart.write and eg. triggered via the ESPHome Time component.
#
# Example:
# time:
#   - platform: homeassistant
#     id: esptime
#   - platform: sntp
#     on_time:
#        # Request package every 10 seconds from inverter at slave address: 0x01
#       - seconds: /10
#         then:
#           - uart.write: [0x02, 0x05, 0x01, 0x02, 0x60, 0x01, 0x85, 0xFC, 0x03]
# 
#
# NOTE !!
# My inverter, unlike most examples found on the net, returns a 255 bytes
# response. Most common inverter response length is 150 bytes (0x96) or 157 (0x9D).
# So almost all commands/registers do not match other examples on the net.
# Package structure is also somewhat different.
#
# Below the actual ESPHome config, you'll find a compiled list of all registers
# I've identified. Those marked with a question mark are not confirmed,
# but an 'educated guess' only.
#
# Tested on both ESP8266 with software uart and ESP32 with hardware uart.
# I experience no issues in production with the ESP8266 software uart.
# Not even with debug uart logging active.
#
# My config:
# Inverter part no.: EOE46010287
# Single string input PV1: 3500W
# Single phase output: L1
# Slave address: 0x01
# Baud rate: 19200
# Install country: Denmark
#
# Gateway request: 02:05:01:02:60:01:85:FC:03
# Inverter response: 02:06:01:FF:60:01 + 255 data bytes (incl. CRC bytes) + ETX byte
#
# Actually the response doesn't match the protocol, as the CRC bytes and trailing
# ETX byte should be excluded from data length identifier (0xff)
# Here, strangely enough, the CRC is included, but not the ETX ?
#
# A few of the 'public known' commands have been tested. Most unfortunately did fail.
# Haven't really spend much time on testing further commands, as all the data
# i need is in gateway package.
# But commmand for eg. inverters serial no. is working ok on my inverter.
# - uart.write: [0x02, 0x05, 0x01, 0x02, 0x00, 0x01, 0xAD, 0xFC, 0x03] will response
# correctly with serial no.


esphome:
  name: "delta-solivia-8266"
  platform: ESP8266
  board: d1_mini
  includes:
    - solivia.h
    
# Enable logging
logger:
#level: VERBOSE
  #baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "my_api_key"

ota:
  password: "my_ota_password"

wifi:
  ssid: "my_ssid"
  password: "my_password"
  manual_ip:
    static_ip: xxx.xxx.x.xx
    gateway: xxx.xxx.x.x
    subnet: 255.255.255.0
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Solivia_8266 Fallback Hotspot"
    password: "my_fallback_password"

captive_portal:

# Remove hash signs and activate, if you don't have a Solivia gataway.
# With this you emulate the gateways request for data response from the inverter.
# With settings below, the requests are send every 10 seconds.
#
#time:
#  - platform: homeassistant
#    id: esptime
#  - platform: sntp
#    on_time:
#       # Request package every 10 seconds from inverter at slave address: 0x01
#      - seconds: /10
#        then:
#          - uart.write: [0x02, 0x05, 0x01, 0x02, 0x60, 0x01, 0x85, 0xFC, 0x03]

binary_sensor:
  - platform: status
    name: "Solivia Node Status"
    id: solivia_status
 
uart:
  id: mod_bus
  # tx_pin: 17 # Typical tx pin for hardware UART#2 on ESP32 modules
  # rx_pin: 16 # Typical rx pin for hardware UART#2 on ESP32 modules
  tx_pin: 5 # D2 ESP8266 tx pin for soft serial uart
  rx_pin: 4 # D1 ESP8266 rx pin for soft serial uart
  # Increase buffer size as total package we're sniffing is 262 bytes in total
  # Inverter reply: 6 bytes + Data: 255 bytes + ETX: 1 byte = 262 bytes
  rx_buffer_size: 512
  baud_rate: 19200
  parity: NONE
  stop_bits: 1
  #debug: # Activate if you need to investigate package details in the log

sensor:
- platform: custom
  lambda: |-
    auto delta = new solivia(id(mod_bus));
    App.register_component(delta);
    return {delta->ac_power, delta->d_yield, delta->dc_a, delta->dc_v, delta->ac_a, delta->ac_v, delta->freq, delta->hs_1, delta->hs_2, delta->t_yield, delta->dc_power, delta->iso_plus, delta->iso_minus, delta->unknown_0x64, delta->unknown_0x65, delta->unknown_0x91};
  sensors:
  - name: "AC power"
    #icon: mdi:SolarPowerVariant
    device_class: energy
    unit_of_measurement: W
    accuracy_decimals: 0
    # Frequent update, as sensor is used to calculate consumption with iem3155 sensor.total_active_power
    filters:
    - throttle: 10s 
  
  - name: "Solar daily yield"
    #icon: mdi:SolarPower
    device_class: energy
    # Set state_class in order for HA to use sensor in the Energy component
    state_class: total_increasing
    unit_of_measurement: Wh
    accuracy_decimals: 0
    filters:
    - throttle: 60s
  
  - name: "Solar DC current"
    device_class: energy
    unit_of_measurement: A
    accuracy_decimals: 1
    filters:
    - throttle: 60s
    - multiply: 0.1
  
  - name: "Solar DC voltage"
    device_class: energy
    unit_of_measurement: V
    accuracy_decimals: 0
    filters:
    - throttle: 60s
  
  - name: "Solar AC current"
    device_class: energy
    unit_of_measurement: A
    accuracy_decimals: 1
    filters:
    - throttle: 60s
    - multiply: 0.1
  
  - name: "Solar AC voltage"
    device_class: energy
    unit_of_measurement: V
    accuracy_decimals: 0
    filters:
    - throttle: 60s
  
  - name: "Solar frequency"
    device_class: energy
    unit_of_measurement: Hz
    accuracy_decimals: 2
    filters:
    - throttle: 60s
    - multiply: 0.01
  
  - name: "Heat sink #1"
    device_class: temperature
    unit_of_measurement: °C
    filters:
    - throttle: 60s
  
  - name: "Heat sink #2"
    device_class: temperature
    unit_of_measurement: °C
    filters:
    - throttle: 60s
  
  - name: "Solar total yield"
    device_class: energy
    unit_of_measurement: kWh
    accuracy_decimals: 0
    filters:
    - throttle: 60s
    - multiply: 0.001
  
  - name: "DC Power"
    device_class: energy
    unit_of_measurement: W
    accuracy_decimals: 0
    filters:
    - throttle: 60s
  
  - name: "ISO +"
    device_class: energy
    unit_of_measurement: kΩ
    filters:
    - throttle: 60s
  
  - name: "ISO -"
    device_class: energy
    unit_of_measurement: kΩ
    filters:
    - throttle: 60s
  
  - name: "unknown_0x64"
    device_class: energy
    unit_of_measurement: W
    filters:
    - throttle: 60s

  - name: "unknown_0x65"
    device_class: energy
    unit_of_measurement: W
    filters:
    - throttle: 60s
  
  - name: "unknown_0x91"
    device_class: energy
    unit_of_measurement: W
    filters:
    - throttle: 60s
  


# Complete 'live' package example - captured [2022-08-08 10:32:54 GMT+1]:

# Request:  02:05:01:02:60:01:85:FC:03
# Response: 02:06:01:FF:60:01
# Package data:
# 0x00   45:4F:45:34:36:30:31:30:32:38:37:31:31:33:32:38
# 0x10   37:30:38:31:33:30:31:30:30:33:33:39:38:31:33:30
# 0x20   31:30:38:01:02:1A:00:00:00:00:23:34:00:00:00:00
# 0x30   23:34:00:00:00:00:00:00:00:00:00:00:23:34:00:00
# 0x40   00:00:00:00:00:00:00:00:01:00:03:96:01:9A:00:16
# 0x50   00:00:00:00:00:00:00:00:00:00:00:00:00:23:00:EC
# 0x60   13:88:03:64:FF:4E:00:00:00:00:00:00:00:00:00:00
# 0x70   00:00:00:00:00:00:00:00:00:00:08:98:07:D0:00:33
# 0x80   00:33:00:00:00:00:02:14:3E:3E:00:26:48:A6:00:00
# 0x90   00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
# 0xA0   00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
# 0xB0   00:00:00:00:08:F7:00:00:01:16:00:00:00:00:00:00
# 0xC0   00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
# 0xD0   00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
# 0xE0   00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
# 0xF0   00:00:00:00:00:00:00:00:00:00:00:00:00:34:A4:03
#
# Register address:
#
# 0x00 - 0x0A:	Part no.                  EOE46010287           45:4F:45:34:36:30:31:30:32:38:37
# 0x0B - 0x1C:	Serial no.                113287081301003398    31:31:33:32:38:37:30:38:31:33:30:31:30:30:33:33:39:38
# 0x1D - 0x22:  Install date (YYMMDD) ?   130108                31:33:30:31:30:38
# 0x23 - 0x25:  FW rev. system            1.02.26               01:02:1A
# 0x29 - 0x2B:  FW Rev. DC, AC or RTS ?   0.35.52               00:23:34
# 0x2F - 0x31:  FW Rev. DC, AC or RTS ?   0.35.52               00:23:34
# 0x3B - 0x3D:  FW Rev. DC, AC or RTS ?   0.35.52               00:23:34
# 0x48 - 0x48:  Inverter slave address ?  1                     01
# 0x4A - 0x4B:  DC Power PV1 ?            918                   03:96
# 0x4C - 0x4D:  DC voltage PV1            410                   01:9A
# 0x4E - 0x4F:  DC current PV1 (2,2 A)    22                    00:16
# 0x5C - 0x5D:  AC current L1 (3,5 A)     35                    00:23
# 0x5E - 0x5F:  AC voltage L1             236                   00:EC
# 0x60 - 0x61:  AC frequency (50,00 Hz)   5000                  13:88
# 0x62 - 0x63:  AC Power L1               868                   03:64
# 0x64 - 0x64:  Unknown ?                 255                   FF
# 0x65 - 0x65:  Unknown ?                 78                    4E
# 0x7A - 0x7B:  ISO+ resistance kΩ        2200                  08:98
# 0x7C - 0x7D:  ISO- resistance kΩ        2000                  07:D0
# 0x7E - 0x7F:  Heat sink AC (50°C) ?     50                    00:33
# 0x80 - 0x81:  Heat sink DC (50°C) ?     50                    00:33
# 0x86 - 0x89   Total yield(34881,086kWh) 34881086              02:14:3E:3E
# 0x8A - 0x8C:  Uptime total in minutes   2508966               00:26:48:A6
# 0x91 - 0x91:  Inverter status ?         0                     00
# 0xB4 - 0xB5:  Daily power yield Wh      2295                  08:F7
# 0xB8 - 0xB9:  Uptime today in minutes   278                   01:16
#
# Observations on the unknown registers:
#
# 0x64 - 0x64: Unknown register ?
# Only 0x00, 0xff and some rare 0xfe value have been observed. 0x00 when there's no production. Otherwise 0xFF
#
# 0x65 - 0x65: Unknown register ?
# Fluctuates throughout the day. DC injector value mA ??
#
# 0x7E - 0x7F: AC Heat sink register ?
# 0x80 - 0x81: DC Heat sink register ?
# The two heat sink registers has during a three day test period been completely identical.
# So there's most likely only one physical sensor in my inverter.
# When inverter is is production mode, values have been in the range from 36 - 62°C throughout the day (high summer period)
#
# 0x91 - 0x91: Device status register ?
# When inverter is active value is 0. When inactive value is 4
# On device init in the morning value shifts rapidly from 4 to 6, from 6 to 8, from 8 back to 2 and finally to 0 (inverter active)
# Sometimes values above 4 are also observed during inverter shutdown in the evening.